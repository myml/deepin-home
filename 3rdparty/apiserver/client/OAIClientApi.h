/**
 * Deepin官网
 * deepin的官方网站后台接口
 *
 * The version of the OpenAPI document: 1.0
 * Contact: wurongjie@deepin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClientApi_H
#define OAI_OAIClientApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHandlers_BBSURLRequest.h"
#include "OAIHandlers_BBSURLResponse.h"
#include "OAIHandlers_ClientBBSTokenRequest.h"
#include "OAIHandlers_ClientBBSTokenResponse.h"
#include "OAIHandlers_ClientConfigResponse.h"
#include "OAIHandlers_ClientNotifyListResponse.h"
#include "OAIHandlers_ClientQuestionnaireListResponse.h"
#include "OAIHandlers_NodeSelectResponse.h"
#include "OAIHandlers_PublicTopicsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClientApi : public QObject {
    Q_OBJECT

public:
    OAIClientApi(const int timeOut = 0);
    ~OAIClientApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  channel_id QString [required]
    * @param[in]  language QString [required]
    */
    void publicChannelChannelIdTopicNMessagesGet(const QString &channel_id, const QString &language);

    /**
    * @param[in]  channel_id QString [required]
    * @param[in]  language QString [required]
    */
    void publicChannelChannelIdTopicQMessagesGet(const QString &channel_id, const QString &language);

    /**
    * @param[in]  channel_id QString [required]
    */
    void publicChannelChannelIdTopicsGet(const QString &channel_id);

    /**
    * @param[in]  data OAIHandlers_ClientBBSTokenRequest [required]
    */
    void publicLoginBbsTokenPost(const OAIHandlers_ClientBBSTokenRequest &data);

    /**
    * @param[in]  data OAIHandlers_BBSURLRequest [required]
    */
    void publicLoginBbsUrlPost(const OAIHandlers_BBSURLRequest &data);


    void publicLoginInfoGet();

    /**
    * @param[in]  machine_id QString [required]
    */
    void publicMachineMachineIdNodeGet(const QString &machine_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void publicChannelChannelIdTopicNMessagesGetCallback(OAIHttpRequestWorker *worker);
    void publicChannelChannelIdTopicQMessagesGetCallback(OAIHttpRequestWorker *worker);
    void publicChannelChannelIdTopicsGetCallback(OAIHttpRequestWorker *worker);
    void publicLoginBbsTokenPostCallback(OAIHttpRequestWorker *worker);
    void publicLoginBbsUrlPostCallback(OAIHttpRequestWorker *worker);
    void publicLoginInfoGetCallback(OAIHttpRequestWorker *worker);
    void publicMachineMachineIdNodeGetCallback(OAIHttpRequestWorker *worker);

signals:

    void publicChannelChannelIdTopicNMessagesGetSignal(QList<OAIHandlers_ClientNotifyListResponse> summary);
    void publicChannelChannelIdTopicQMessagesGetSignal(QList<OAIHandlers_ClientQuestionnaireListResponse> summary);
    void publicChannelChannelIdTopicsGetSignal(OAIHandlers_PublicTopicsResponse summary);
    void publicLoginBbsTokenPostSignal(OAIHandlers_ClientBBSTokenResponse summary);
    void publicLoginBbsUrlPostSignal(OAIHandlers_BBSURLResponse summary);
    void publicLoginInfoGetSignal(OAIHandlers_ClientConfigResponse summary);
    void publicMachineMachineIdNodeGetSignal(OAIHandlers_NodeSelectResponse summary);

    void publicChannelChannelIdTopicNMessagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIHandlers_ClientNotifyListResponse> summary);
    void publicChannelChannelIdTopicQMessagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIHandlers_ClientQuestionnaireListResponse> summary);
    void publicChannelChannelIdTopicsGetSignalFull(OAIHttpRequestWorker *worker, OAIHandlers_PublicTopicsResponse summary);
    void publicLoginBbsTokenPostSignalFull(OAIHttpRequestWorker *worker, OAIHandlers_ClientBBSTokenResponse summary);
    void publicLoginBbsUrlPostSignalFull(OAIHttpRequestWorker *worker, OAIHandlers_BBSURLResponse summary);
    void publicLoginInfoGetSignalFull(OAIHttpRequestWorker *worker, OAIHandlers_ClientConfigResponse summary);
    void publicMachineMachineIdNodeGetSignalFull(OAIHttpRequestWorker *worker, OAIHandlers_NodeSelectResponse summary);

    void publicChannelChannelIdTopicNMessagesGetSignalE(QList<OAIHandlers_ClientNotifyListResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicChannelChannelIdTopicQMessagesGetSignalE(QList<OAIHandlers_ClientQuestionnaireListResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicChannelChannelIdTopicsGetSignalE(OAIHandlers_PublicTopicsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicLoginBbsTokenPostSignalE(OAIHandlers_ClientBBSTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicLoginBbsUrlPostSignalE(OAIHandlers_BBSURLResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicLoginInfoGetSignalE(OAIHandlers_ClientConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicMachineMachineIdNodeGetSignalE(OAIHandlers_NodeSelectResponse summary, QNetworkReply::NetworkError error_type, QString error_str);

    void publicChannelChannelIdTopicNMessagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicChannelChannelIdTopicQMessagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicChannelChannelIdTopicsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicLoginBbsTokenPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicLoginBbsUrlPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicLoginInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicMachineMachineIdNodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
