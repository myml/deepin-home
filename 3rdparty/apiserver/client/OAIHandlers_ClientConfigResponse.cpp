/**
 * Deepin官网
 * deepin的官方网站后台接口
 *
 * The version of the OpenAPI document: 1.0
 * Contact: wurongjie@deepin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHandlers_ClientConfigResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHandlers_ClientConfigResponse::OAIHandlers_ClientConfigResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHandlers_ClientConfigResponse::OAIHandlers_ClientConfigResponse() {
    this->initializeModel();
}

OAIHandlers_ClientConfigResponse::~OAIHandlers_ClientConfigResponse() {}

void OAIHandlers_ClientConfigResponse::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIHandlers_ClientConfigResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHandlers_ClientConfigResponse::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(redirect_url, json[QString("redirect_url")]);
    m_redirect_url_isSet = !json[QString("redirect_url")].isNull() && m_redirect_url_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAIHandlers_ClientConfigResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHandlers_ClientConfigResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(client_id));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirect_url"), ::OpenAPI::toJsonValue(redirect_url));
    }
    if (scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(scopes));
    }
    return obj;
}

QString OAIHandlers_ClientConfigResponse::getClientId() const {
    return client_id;
}
void OAIHandlers_ClientConfigResponse::setClientId(const QString &client_id) {
    this->client_id = client_id;
    this->m_client_id_isSet = true;
}

bool OAIHandlers_ClientConfigResponse::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIHandlers_ClientConfigResponse::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIHandlers_ClientConfigResponse::getRedirectUrl() const {
    return redirect_url;
}
void OAIHandlers_ClientConfigResponse::setRedirectUrl(const QString &redirect_url) {
    this->redirect_url = redirect_url;
    this->m_redirect_url_isSet = true;
}

bool OAIHandlers_ClientConfigResponse::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIHandlers_ClientConfigResponse::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

QList<QString> OAIHandlers_ClientConfigResponse::getScopes() const {
    return scopes;
}
void OAIHandlers_ClientConfigResponse::setScopes(const QList<QString> &scopes) {
    this->scopes = scopes;
    this->m_scopes_isSet = true;
}

bool OAIHandlers_ClientConfigResponse::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIHandlers_ClientConfigResponse::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIHandlers_ClientConfigResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHandlers_ClientConfigResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
