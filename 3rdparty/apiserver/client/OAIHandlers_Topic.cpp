/**
 * Deepin官网
 * deepin的官方网站后台接口
 *
 * The version of the OpenAPI document: 1.0
 * Contact: wurongjie@deepin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHandlers_Topic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHandlers_Topic::OAIHandlers_Topic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHandlers_Topic::OAIHandlers_Topic() {
    this->initializeModel();
}

OAIHandlers_Topic::~OAIHandlers_Topic() {}

void OAIHandlers_Topic::initializeModel() {

    m_change_id_isSet = false;
    m_change_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notify_isSet = false;
    m_notify_isValid = false;
}

void OAIHandlers_Topic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHandlers_Topic::fromJsonObject(QJsonObject json) {

    m_change_id_isValid = ::OpenAPI::fromJsonValue(change_id, json[QString("change_id")]);
    m_change_id_isSet = !json[QString("change_id")].isNull() && m_change_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notify_isValid = ::OpenAPI::fromJsonValue(notify, json[QString("notify")]);
    m_notify_isSet = !json[QString("notify")].isNull() && m_notify_isValid;
}

QString OAIHandlers_Topic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHandlers_Topic::asJsonObject() const {
    QJsonObject obj;
    if (m_change_id_isSet) {
        obj.insert(QString("change_id"), ::OpenAPI::toJsonValue(change_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_notify_isSet) {
        obj.insert(QString("notify"), ::OpenAPI::toJsonValue(notify));
    }
    return obj;
}

QString OAIHandlers_Topic::getChangeId() const {
    return change_id;
}
void OAIHandlers_Topic::setChangeId(const QString &change_id) {
    this->change_id = change_id;
    this->m_change_id_isSet = true;
}

bool OAIHandlers_Topic::is_change_id_Set() const{
    return m_change_id_isSet;
}

bool OAIHandlers_Topic::is_change_id_Valid() const{
    return m_change_id_isValid;
}

QString OAIHandlers_Topic::getName() const {
    return name;
}
void OAIHandlers_Topic::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIHandlers_Topic::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHandlers_Topic::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIHandlers_Topic::isNotify() const {
    return notify;
}
void OAIHandlers_Topic::setNotify(const bool &notify) {
    this->notify = notify;
    this->m_notify_isSet = true;
}

bool OAIHandlers_Topic::is_notify_Set() const{
    return m_notify_isSet;
}

bool OAIHandlers_Topic::is_notify_Valid() const{
    return m_notify_isValid;
}

bool OAIHandlers_Topic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHandlers_Topic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
